function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';

var CodeSnippetSkeleton =
/*#__PURE__*/
function (_Component) {
  _inherits(CodeSnippetSkeleton, _Component);

  function CodeSnippetSkeleton() {
    _classCallCheck(this, CodeSnippetSkeleton);

    return _possibleConstructorReturn(this, (CodeSnippetSkeleton.__proto__ || Object.getPrototypeOf(CodeSnippetSkeleton)).apply(this, arguments));
  }

  _createClass(CodeSnippetSkeleton, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          className = _props.className,
          type = _props.type,
          other = _objectWithoutProperties(_props, ["className", "type"]);

      var codeSnippetClasses = classNames(className, {
        'bx--snippet': true,
        'bx--skeleton': true,
        'bx--snippet--single': type === 'single',
        'bx--snippet--multi': type === 'multi'
      });

      if (type === 'single') {
        return React.createElement("div", _extends({
          className: codeSnippetClasses
        }, other), React.createElement("div", {
          className: "bx--snippet-container"
        }, React.createElement("span", null)));
      }

      if (type === 'multi') {
        return React.createElement("div", _extends({
          className: codeSnippetClasses
        }, other), React.createElement("div", {
          className: "bx--snippet-container"
        }, React.createElement("span", null), React.createElement("span", null), React.createElement("span", null)));
      }
    }
  }]);

  return CodeSnippetSkeleton;
}(Component);

Object.defineProperty(CodeSnippetSkeleton, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    /**
     * The type of code snippet
     * can be single or multi
     */
    type: PropTypes.oneOf(['single', 'multi']),
    className: PropTypes.string
  }
});
Object.defineProperty(CodeSnippetSkeleton, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    type: 'single'
  }
});
export { CodeSnippetSkeleton as default };